1. Implement Stack and all its operations using Linked List.

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class StackUsingLinkedList {
    private Node top; // Top of the stack

    // Constructor to initialize the stack
    public StackUsingLinkedList() {
        top = null;
    }

    // Push operation
    public void push(int data) {
        Node newNode = new Node(data);
        if (top == null) {
            top = newNode;
        } else {
            newNode.next = top;
            top = newNode;
        }
        System.out.println(data + " pushed onto stack.");
    }

    // Pop operation
    public int pop() {
        if (top == null) {
            System.out.println("Stack underflow! Cannot pop from an empty stack.");
            return -1; // Indicating stack is empty
        }
        int poppedData = top.data;
        top = top.next;
        System.out.println(poppedData + " popped from stack.");
        return poppedData;
    }

    // Peek operation
    public int peek() {
        if (top == null) {
            System.out.println("Stack is empty! Nothing to peek.");
            return -1; // Indicating stack is empty
        }
        return top.data;
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == null;
    }

    // Display all elements in the stack
    public void display() {
        if (top == null) {
            System.out.println("Stack is empty!");
            return;
        }
        System.out.println("Stack elements:");
        Node current = top;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class StackLinkedListDemo {
    public static void main(String[] args) {
        StackUsingLinkedList stack = new StackUsingLinkedList();

        // Push elements onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);

        // Display the stack
        stack.display();

        // Peek the top element
        System.out.println("Top element is: " + stack.peek());

        // Pop elements from the stack
        stack.pop();
        stack.pop();

        // Display the stack
        stack.display();

        // Check if the stack is empty
        System.out.println("Is the stack empty? " + stack.isEmpty());

        // Pop the last element
        stack.pop();

        // Try popping from an empty stack
        stack.pop();

        // Check if the stack is empty again
        System.out.println("Is the stack empty? " + stack.isEmpty());
    }
}
