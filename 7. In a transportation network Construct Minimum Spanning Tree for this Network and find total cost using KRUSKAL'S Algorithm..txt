7. In a transportation network, construct an optimal road system connecting cities to minimize construction costs while ensuring every city is reachable. Construct Minimum Spanning Tree for this Network and find total cost using KRUSKAL'S Algorithm.

import java.util.*;

class Edge implements Comparable<Edge> {
    int source, destination, weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    @Override
    public int compareTo(Edge o) {
        return this.weight - o.weight; // Sort edges by weight
    }
}

public class KruskalMST {
    private int[] parent, rank;

    public KruskalMST(int vertices) {
        parent = new int[vertices];
        rank = new int[vertices];

        // Initialize parent and rank arrays
        for (int i = 0; i < vertices; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    private int find(int vertex) {
        if (parent[vertex] != vertex) {
            parent[vertex] = find(parent[vertex]); // Path compression
        }
        return parent[vertex];
    }

    private void union(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }

    public int findMST(List<Edge> edges, int vertices) {
        Collections.sort(edges); // Step 1: Sort edges by weight

        int mstWeight = 0;
        List<Edge> mstEdges = new ArrayList<>();

        for (Edge edge : edges) {
            int rootSource = find(edge.source);
            int rootDestination = find(edge.destination);

            // If adding this edge doesn't form a cycle
            if (rootSource != rootDestination) {
                union(rootSource, rootDestination); // Step 2: Union
                mstWeight += edge.weight;
                mstEdges.add(edge);
            }
        }

        // Print MST edges
        System.out.println("Edges in Minimum Spanning Tree:");
        for (Edge edge : mstEdges) {
            System.out.println(edge.source + " -- " + edge.destination + " == " + edge.weight);
        }

        return mstWeight;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of cities (vertices): ");
        int vertices = sc.nextInt();

        System.out.print("Enter number of roads (edges): ");
        int edgesCount = sc.nextInt();

        List<Edge> edges = new ArrayList<>();

        System.out.println("Enter edges in the format: source destination weight");
        for (int i = 0; i < edgesCount; i++) {
            int source = sc.nextInt();
            int destination = sc.nextInt();
            int weight = sc.nextInt();
            edges.add(new Edge(source, destination, weight));
        }

        KruskalMST kruskal = new KruskalMST(vertices);
        int totalCost = kruskal.findMST(edges, vertices);

        System.out.println("Total cost of constructing the road system: " + totalCost);
    }
}



//input
Enter number of cities (vertices): 4
Enter number of roads (edges): 5
Enter edges in the format: source destination weight
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4

