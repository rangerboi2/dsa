8. You are tasked with optimizing delivery routes for a courier service in a city with multiple pickup and delivery locations. The courier service wants to minimize the total distance travelled while ensuring timely deliveries to all destinations. Find the shortest paths between these locations using the DIJKSTRA algorithm.

import java.util.*;

class Edge {
    int target;
    int weight;

    public Edge(int target, int weight) {
        this.target = target;
        this.weight = weight;
    }
}

public class DijkstraUserInput {

    public static int[] dijkstra(List<List<Edge>> graph, int start) {
        int n = graph.size();
        int[] distances = new int[n];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[start] = 0;

        PriorityQueue<int[]> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        priorityQueue.offer(new int[]{start, 0});

        while (!priorityQueue.isEmpty()) {
            int[] current = priorityQueue.poll();
            int node = current[0];
            int distance = current[1];

            if (distance > distances[node]) continue;

            for (Edge edge : graph.get(node)) {
                int newDist = distance + edge.weight;
                if (newDist < distances[edge.target]) {
                    distances[edge.target] = newDist;
                    priorityQueue.offer(new int[]{edge.target, newDist});
                }
            }
        }

        return distances;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input number of nodes and edges
        System.out.print("Enter the number of nodes: ");
        int nodes = scanner.nextInt();
        System.out.print("Enter the number of edges: ");
        int edges = scanner.nextInt();

        // Initialize the graph as an adjacency list
        List<List<Edge>> graph = new ArrayList<>();
        for (int i = 0; i < nodes; i++) {
            graph.add(new ArrayList<>());
        }

        // Input edges
        System.out.println("Enter edges in the format: source target weight");
        for (int i = 0; i < edges; i++) {
            int source = scanner.nextInt();
            int target = scanner.nextInt();
            int weight = scanner.nextInt();
            graph.get(source).add(new Edge(target, weight));
        }

        // Input the starting node
        System.out.print("Enter the starting node: ");
        int startNode = scanner.nextInt();

        // Run Dijkstra's algorithm
        int[] distances = dijkstra(graph, startNode);

        // Output the shortest distances
        System.out.println("Shortest distances from node " + startNode + ":");
        for (int i = 0; i < distances.length; i++) {
            if (distances[i] == Integer.MAX_VALUE) {
                System.out.println("Node " + i + ": Unreachable");
            } else {
                System.out.println("Node " + i + ": " + distances[i]);
            }
        }

        scanner.close();
    }
}
